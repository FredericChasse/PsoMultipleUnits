clear
close all

%% Constants

% PROTOCOL_DELIMITER = uint8(hex2num('7E'));
PROTOCOL_DELIMITER = uint8(126);

NEW_RNG_SEED = uint8(0);
START_ACQ = uint8(1);
STOP_ACQ = uint8(2);
UNITS_DATA = uint8(3);
PSO_DATA = uint8(4);

CLASSIC_PSO = uint8(0);
PARALLEL_PSO = uint8(1);
PARALLEL_PSO_MULTI_SWARM = uint8(2);
MULTI_UNIT = uint8(3);
EXTREMUM_SEEKING = uint8(4);
CHARACTERIZATION = uint8(5);

PROTOCOL_START_ALGO = uint8('!' - 0);

PROTOCOL_STOP_ALGO = uint8('x' - 0);

SIZE_OF_PROTOCOL_HEADER = 4;

%% Test suite

nTests = 2;

% algo = CHARACTERIZATION;
% algo = CLASSIC_PSO;
algo = PARALLEL_PSO;
% algo = PARALLEL_PSO_MULTI_SWARM;
% algo = MULTI_UNIT;
% algo = EXTREMUM_SEEKING;
% units = uint8(0:1:7);
units = uint8(0:1:6);
nUnits = uint8(length(units));

% Wait for the user to start the program
reply = 'N';
while reply == 'N'
  reply = upper(input('Start? Y/N [N]:','s'));
  if isempty(reply)
    reply = 'Y'
  end
end

switch algo
  case CHARACTERIZATION
    algoName = 'Characterization';
  case CLASSIC_PSO
    algoName = 'Sequential PSO';
  case PARALLEL_PSO
    algoName = 'Parallel PSO';
  case PARALLEL_PSO_MULTI_SWARM
    algoName = 'Parallel PSO Multi Swarm';
  case MULTI_UNIT
    algoName = 'Multi-Unit';
  case EXTREMUM_SEEKING
    algoName = 'Extremum Seeking';
  otherwise
    error('Not a valid algo');
end

for iTest = 1 : nTests
  
  Pic2MatlabMulti
  
  time = clock;
  year = num2str(time(1));
  month = num2str(time(2));
  day = num2str(time(3));
  hour = num2str(time(4));
  minute = sprintf('%02.0f', time(5));
  second = sprintf('%02.0f', time(6));
  timeStr = [year '-' month '-' day '-' hour 'h' minute 'm' second 's'];
%   timeStr = [num2str(time(1)) '-' num2str(time(2)) '-' num2str(time(3)) '-' num2str(time(4)) 'h' num2str(time(5)) 'm' num2str(time(6)) 's'];
  xlsname = ['.\test results\' algoName '_' timeStr '.xlsx'];
  
  titleStr = {'
  xlswrite(xlsname, tsMem , 'Positions', 'A1');
  xlswrite(xlsname, posMem, 'Positions', 'B1');
  xlswrite(xlsname, tsMem , 'Powers'   , 'A1');
  xlswrite(xlsname, powMem, 'Powers'   , 'B1');
  
%   for iUnit = 1 : nUnits
%     xlswrite(xlsname, posMem(iUnit:nUnits:end)', ['Positions - unit ' num2str(iUnit)]);
%     xlswrite(xlsname, powMem(iUnit:nUnits:end)', ['Powers - unit ' num2str(iUnit)]);
%   end
end
  
  
  
  